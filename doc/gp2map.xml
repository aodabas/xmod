<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  gp2map.xml            XMod documentation            Chris Wensley  -->
<!--                                                        & Murat Alp  -->
<!--  Copyright (C) 2001-2017, Chris Wensley et al,                      --> 
<!--  School of Computer Science, Bangor University, U.K.                --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-gpmap2">
<Heading>2d-mappings</Heading>
<Index>2d-mapping</Index>

<Section><Heading>Morphisms of 2-dimensional groups</Heading>

<Index>morphism of 2d-group</Index>
<Index>crossed module morphism</Index>
This chapter describes morphisms of (pre-)crossed modules
and (pre-)cat1-groups.

<ManSection>
   <Attr Name="Source"
         Arg="map" />
   <Attr Name="Range"
         Arg="map" />
   <Attr Name="SourceHom"
         Arg="map" />
   <Attr Name="RangeHom"
         Arg="map" />
<Description>
Morphisms of <E>2-dimensional groups</E> are implemented as 
<E>2-dimensional mappings</E>.
These have a pair of 2-dimensional groups as source and range, 
together with two group homomorphisms mapping between corresponding 
source and range groups.
These functions return <C>fail</C> when invalid data is supplied.
</Description>
</ManSection>
</Section>


<Section><Heading>Morphisms of pre-crossed modules</Heading>

<Index>morphism</Index>
<ManSection>
   <Prop Name="IsXModMorphism"
         Arg="map" />
   <Prop Name="IsPreXModMorphism"
         Arg="map" />
<Description>
A morphism between two pre-crossed modules 
<M>\mathcal{X}_{1} = (\partial_1 : S_1 \to R_1)</M> and  
<M>\mathcal{X}_{2} = (\partial_2 : S_2 \to R_2)</M> 
is a pair  <M>(\sigma, \rho)</M>, where 
<M>\sigma : S_1 \to S_2</M> and <M>\rho : R_1 \to R_2</M> 
commute with the two boundary maps
and are morphisms for the two actions:
<Display>
\partial_2 \circ \sigma ~=~ \rho \circ \partial_1, \qquad
\sigma(s^r) ~=~ (\sigma s)^{\rho r}.
</Display>
Thus  <M>\sigma</M> is the <C>SourceHom</C>  
and  <M>\rho</M>  is the <C>RangeHom</C>.
When <M>\mathcal{X}_{1} = \mathcal{X}_{2}</M>
and <M>\sigma, \rho</M> are automorphisms then 
<M>(\sigma, \rho)</M>  is an automorphism of <M>\mathcal{X}_1</M>. 
The group of automorphisms is denoted 
by <M>{\rm Aut}(\mathcal{X}_1 )</M>. 
</Description>
</ManSection>


<ManSection>
   <Prop Name="IsInjective"
         Arg="map" />
   <Prop Name="IsSurjective"
         Arg="map" />
   <Prop Name="IsSingleValued"
         Arg="map" />
   <Prop Name="IsTotal"
         Arg="map" />
   <Prop Name="IsBijective"
         Arg="map" />
   <Prop Name="IsEndo2DimensionalMapping"
         Arg="map" />
<Description>
The usual properties of mappings are easily checked.
It is usually sufficient to verify that both the <C>SourceHom</C> and the
<C>RangeHom</C> have the required property.
</Description>
</ManSection>

<ManSection>
   <Func Name="XModMorphism"
         Arg="args" />
   <Oper Name="XModMorphismByHoms"
         Arg="X1 X2 sigma rho" />
   <Func Name="PreXModMorphism"
         Arg="args" />
   <Oper Name="PreXModMorphismByHoms"
         Arg="P1 P2 sigma rho" />
   <Oper Name="InclusionMorphism2DimensionalDomains"
         Arg="X1 S1" />
   <Oper Name="InnerAutomorphismXMod"
         Arg="X1 r" />
   <Attr Name="IdentityMapping"
         Arg="X1" />
<Description>
These are the constructors for morphisms of pre-crossed and crossed modules.
<P/>
In the following example we construct a simple automorphism of 
the crossed module  <C>X1</C>  constructed in the previous chapter.
</Description>
</ManSection>
<P/>
<Index>display a 2d-mapping</Index>
<Index>order of a 2d-automorphism</Index>
<Example>
<![CDATA[
gap> sigma1 := GroupHomomorphismByImages( c5, c5, [ (5,6,7,8,9) ]
        [ (5,9,8,7,6) ] );;
gap> rho1 := IdentityMapping( Range( X1 ) );
IdentityMapping( PAut(c5) )
gap> mor1 := XModMorphism( X1, X1, sigma1, rho1 );
[[c5->PAut(c5))] => [c5->PAut(c5))]] 
gap> Display( mor1 );
Morphism of crossed modules :-
: Source = [c5->PAut(c5))] with generating sets:
  [ (5,6,7,8,9) ]
  [ (1,2,3,4) ]
: Range = Source
: Source Homomorphism maps source generators to:
  [ (5,9,8,7,6) ]
: Range Homomorphism maps range generators to:
  [ (1,2,3,4) ]
gap> IsAutomorphism2DimensionalDomain( mor1 );
true 
gap> Order( mor1 );
2
gap> RepresentationsOfObject( mor1 );
[ "IsComponentObjectRep", "IsAttributeStoringRep", "Is2DimensionalMappingRep" ]
gap> KnownPropertiesOfObject( mor1 );
[ "CanEasilyCompareElements", "CanEasilySortElements", "IsTotal", 
  "IsSingleValued", "IsInjective", "IsSurjective", "RespectsMultiplication", 
  "IsPreXModMorphism", "IsXModMorphism", "IsEndomorphism2DimensionalDomain", 
  "IsAutomorphism2DimensionalDomain" ]
gap> KnownAttributesOfObject( mor1 );
[ "Name", "Order", "Range", "Source", "SourceHom", "RangeHom" ]
]]>
</Example>

<ManSection>
   <Oper Name="PreXModIsomorphismByIsomorphisms"
         Arg="X1 sigma rho" />
   <Attr Name="IsomorphismPerm2DimensionalGroup"
         Arg="obj" />
   <Attr Name="IsomorphismPc2DimensionalGroup"
         Arg="obj" />
<Description>
When <M>{\mathcal X} = (\partial : S \to R)</M> and 
<M>\sigma : S \to S',~ \rho : R \to R'</M> are isomorphisms, 
then <M>(\sigma,\rho) : {\mathcal X} \to {\mathcal X}'</M> 
is an isomorphism where <M>{\mathcal X}' = (\partial' : S' \to R')</M> 
has boundary <M>\partial' = \rho \circ \partial \circ \sigma^{-1}</M>. 
Be sure to test <C>IsBijective</C> for the two functions 
before applying this operation.  
<P/> 
In the same way, taking pairs of maps obtained using 
<C>IsomorphismPermGroup</C> or <C>IsomorphismPcGroup</C>, 
we may construct a crossed module of permutation groups 
or a crossed module of pc-groups isomorphic to a given crossed module. 
</Description>
</ManSection>
<P/>
<Example>
<![CDATA[
gap> q8 := SmallGroup(8,4);;   ## quaternion group 
gap> Xq8 := XModByAutomorphismGroup( q8 );
[Group( [ f1, f2, f3 ] )->Group( [ f1, f2, f3, f4 ] )]
gap> iso := IsomorphismPerm2DimensionalGroup( Xq8 );;
gap> Yq8 := Image( iso );
[Group( [ (1,2,4,6)(3,8,7,5), (1,3,4,7)(2,5,6,8), (1,4)(2,6)(3,7)(5,8) 
 ] )->Group( [ (2,6,5,4), (1,2,4)(3,5,6), (2,5)(4,6), (1,3)(2,5) ] )]
gap> s4 := SymmetricGroup(4);; 
gap> isos4 := IsomorphismGroups( Range(Yq8), s4 );;
gap> id := IdentityMapping( Source( Yq8 ) );; 
gap> IsBijective( id );;  IsBijective( isos4 );;
gap> mor := PreXModIsomorphismByIsomorphisms( Yq8, id, isos4 );;
gap> Zq8 := Image( mor );
[Group( [ (1,2,4,6)(3,8,7,5), (1,3,4,7)(2,5,6,8), (1,4)(2,6)(3,7)(5,8) 
 ] )->SymmetricGroup( [ 1 .. 4 ] )]
]]>
</Example>
</Section>


<Section Label="sect-mor-pre-cat1">
<Heading>Morphisms of pre-cat1-groups</Heading>

A morphism of pre-cat1-groups from 
<M>\mathcal{C}_1 = (e_1;t_1,h_1 : G_1 \to R_1)</M>
to  <M>\mathcal{C}_2 = (e_2;t_2,h_2 : G_2 \to R_2)</M>  
is a pair  <M>(\gamma, \rho)</M>  where
<M>\gamma : G_1 \to G_2</M>  and  <M>\rho : R_1 \to R_2</M>  
are homomorphisms satisfying
<Display>
h_2 \circ \gamma ~=~ \rho \circ h_1, \qquad 
t_2 \circ \gamma ~=~ \rho \circ t_1, \qquad 
e_2 \circ \rho ~=~ \gamma \circ e_1. 
</Display>

<ManSection>
   <Prop Name="IsCat1Morphism"
         Arg="map" />
   <Prop Name="IsPreCat1Morphism"
         Arg="map" />
   <Func Name="Cat1Morphism"
         Arg="args" />
   <Oper Name="Cat1MorphismByHoms"
         Arg="C1 C2 gamma rho" />
   <Func Name="PreCat1Morphism"
         Arg="args" />
   <Oper Name="PreCat1MorphismByHoms"
         Arg="P1 P2 gamma rho" />
   <Oper Name="InclusionMorphism2DimensionalDomains"
         Arg="C1 S1" />
   <Oper Name="InnerAutomorphismCat1"
         Arg="C1 r" />
   <Attr Name="IdentityMapping"
         Arg="C1" />
<Description>
For an example we use the operation <C>DiagonalCat1</C> 
to construct a pair of cat1-groups, then construct a suitable 
pair of homomorphisms <M>(\gamma,\rho)</M>. 
</Description>
</ManSection> 
<P/>
<Example>
<![CDATA[
gap> C4 := DiagonalCat1( [ (1,2), (2,3), (3,4) ] );; 
gap> SetName( C4, "C4" );;
gap> C3 := DiagonalCat1( [ (1,2), (2,3) ] );; 
gap> SetName( C3, "C3" );;
gap> genG := GeneratorsOfGroup( Source(C4) );; 
gap> gamma := GroupHomomorphismByImages( Source(C4), Source(C3), genG, 
>             [ (1,2), (2,3), (1,2), (4,5), (5,6), (4,5) ] );; 
gap> genR := GeneratorsOfGroup( Range(C4) );; 
gap> rho := GroupHomomorphismByImages( Range(C4), Range(C3), genR, 
>             [ (1,2)(4,5), (2,3)(5,6), (1,2)(4,5) ] );; 
gap> mor := PreCat1Morphism( C4, C3, gamma, rho );; 
gap> Display( mor );

]]>
</Example>

<ManSection>
   <Func Name="IsomorphismPermObject" 
         Arg="obj" />
   <Attr Name="IsomorphismPerm2DimensionalGroup" 
         Arg="2DimensionalGroup" />
   <Attr Name="IsomorphismFp2DimensionalGroup"
         Arg="2DimensionalGroup" />
   <Attr Name="IsomorphismPc2DimensionalGroup"
         Arg="2DimensionalGroup" />
   <Func Name="SmallerDegreePerm2DimensionalDomain"
         Arg="2DimensionalDomain" />
   <Oper Name="PreCat1IsomorphismByIsomorphisms"
         Arg="C1 gamma rho" />
<Description>
The global function <C>IsomorphismPermObject</C> 
calls <C>IsomorphismPerm2DimensionalGroup</C>, 
which constructs a morphism whose <C>SourceHom</C> and <C>RangeHom</C> 
are calculated using <C>IsomorphismPermGroup</C> on the source and range.  
Similarly <C>SmallerDegreePermutationRepresentation</C> may be used on the
two groups to obtain <C>SmallerDegreePerm2DimensionalDomain</C>.
Names are assigned automatically.
</Description>
</ManSection>
<P/>
<Example>
<![CDATA[
gap> iso2 := IsomorphismPerm2DimensionalGroup( C2 );
[[G2=>d12] => [..]]
gap> Display( iso2 );
Morphism of cat1-groups :- 
: Source = [G2=>d12] with generating sets:
  [ f1, f2, f3, f4, f5, f6, f7 ]
  [ f1, f2, f3 ]
:  Range = P[G2=>d12] with generating sets:
  [ ( 6,12)( 8,15)( 9,16)(11,19)(13,26)(14,22)(17,27)(18,25)(20,21)(23,24), 
  ( 2, 3)( 5,10)( 9,16)(11,18)(17,23)(19,25)(24,27), 
  ( 4, 5, 7,10)( 6, 9,12,16)( 8,11,14,18)(13,17,20,23)(15,19,22,25)
    (21,24,26,27), ( 4, 6, 7,12)( 5, 9,10,16)( 8,13,14,20)(11,17,18,23)
    (15,21,22,26)(19,24,25,27), ( 4, 7)( 5,10)( 6,12)( 8,14)( 9,16)(11,18)
    (13,20)(15,22)(17,23)(19,25)(21,26)(24,27), ( 1, 2, 3), 
  ( 4, 8,15)( 5,11,19)( 6,13,21)( 7,14,22)( 9,17,24)(10,18,25)(12,20,26)
    (16,23,27) ]
  [ (2,6)(3,5), (1,2,3,4,5,6), (1,3,5)(2,4,6) ]
: Source Homomorphism maps source generators to:
  [ ( 6,12)( 8,15)( 9,16)(11,19)(13,26)(14,22)(17,27)(18,25)(20,21)(23,24), 
  ( 2, 3)( 5,10)( 9,16)(11,18)(17,23)(19,25)(24,27), 
  ( 4, 5, 7,10)( 6, 9,12,16)( 8,11,14,18)(13,17,20,23)(15,19,22,25)
    (21,24,26,27), ( 4, 6, 7,12)( 5, 9,10,16)( 8,13,14,20)(11,17,18,23)
    (15,21,22,26)(19,24,25,27), ( 4, 7)( 5,10)( 6,12)( 8,14)( 9,16)(11,18)
    (13,20)(15,22)(17,23)(19,25)(21,26)(24,27), ( 1, 2, 3), 
  ( 4, 8,15)( 5,11,19)( 6,13,21)( 7,14,22)( 9,17,24)(10,18,25)(12,20,26)
    (16,23,27) ]
: Range Homomorphism maps range generators to:
  [ (2,6)(3,5), (1,2,3,4,5,6), (1,3,5)(2,4,6) ]
]]>
</Example>
</Section>


<Section Label="sect-oper-mor">
<Heading>Operations on morphisms</Heading>
<Index>operations on morphisms</Index>

<ManSection>
   <Oper Name="CompositionMorphism"
         Arg="map2 map1" />
<Description>
Composition of morphisms (written <C>(&lt;map1&gt; * &lt;map2&gt;)</C> 
when maps act on the right) 
calls the <C>CompositionMorphism</C> function for maps (acting on the left),
applied to the appropriate type of 2d-mapping.
</Description>
</ManSection>
<P/>
<Example>
<![CDATA[
gap> H2 := Subgroup(G2,[G2.3,G2.4,G2.6,G2.7]);  SetName( H2, "H2" );
Group([ f3, f4, f6, f7 ])
gap> c6 := Subgroup( d12, [b,c] );  SetName( c6, "c6" );
Group([ f2, f3 ])
gap> SC2 := Sub2DimensionalGroup( C2, H2, c6 );
[H2=>c6]
gap> IsCat1( SC2 );
true
gap> inc2 := InclusionMorphism2DimensionalDomains( C2, SC2 );
[[H2=>c6] => [G2=>d12]]
gap> CompositionMorphism( iso2, inc );                  
[[H2=>c6] => P[G2=>d12]]
]]>
</Example>

<ManSection>
   <Oper Name="Kernel"
         Arg="map" />
   <Attr Name="Kernel2DimensionalMapping"
         Arg="map" />
<Description>
The kernel of a morphism of crossed modules is a normal subcrossed module 
whose groups are the kernels of the source and target homomorphisms. 
The inclusion of the kernel is a standard example of a crossed square, 
but these have not yet been implemented.
</Description>
</ManSection>
<P/>
<Example>
<![CDATA[
gap> c2 := Group( (19,20) );                                    
Group([ (19,20) ])
gap> X0 := XModByNormalSubgroup( c2, c2 );  SetName( X0, "X0" );
[Group( [ (19,20) ] )->Group( [ (19,20) ] )]
gap>  SX2 := Source( X2 );;
gap> genSX2 := GeneratorsOfGroup( SX2 ); 
[ f1, f4, f5, f7 ]
gap> sigma0 := GroupHomomorphismByImages(SX2,c2,genSX2,[(19,20),(),(),()]);
[ f1, f4, f5, f7 ] -> [ (19,20), (), (), () ]
gap> rho0 := GroupHomomorphismByImages(d12,c2,[a1,a2,a3],[(19,20),(),()]);
[ f1, f2, f3 ] -> [ (19,20), (), () ]
gap> mor0 := XModMorphism( X2, X0, sigma0, rho0 );;           
gap> K0 := Kernel( mor0 );
[Group( [ <identity> of ..., f4, f5, f7 ] )->Group( 
[ <identity> of ..., f2, f3 ] )]
 ] )]
]]></Example>

</Section>

</Chapter>
