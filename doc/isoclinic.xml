<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  isclinic.xml          XMod documentation             Alper Odabas  -->
<!--                                                       & Enver Uslu  -->
<!--  version 2.44, 23/09/2015                                           --> 
<!--                                                                     --> 
<!--  Copyright (C) 2001-2015, Chris Wensley et al                       --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-isclnc">
<Heading>Isoclinism of Crossed Modules</Heading>

This chapter describes some functions written by Alper Odaba&#x15f; and  
Enver Uslu, and reported in <Cite Key="OUI1" />. 
They consist of some additional basic functions for crossed modules, 
and some functions dealing specifically with isoclinism. 


<Section Label="iso-ops">
<Heading>More operations for crossed modules</Heading>

<ManSection>
   <Attr Name="PreXModFixedPointSubgroup"
         Arg="X0" />
   <Attr Name="PreXModStabilizer"
         Arg="X0" />
   <Attr Name="DisplacementSubgroup"
         Arg="X0" />
   <Attr Name="DerivedSubXMod"
         Arg="X0" />
<Description>
The <C>PreXModFixedPointSubgroup(X)</C> for 
<M>\mathcal{X}=(\partial : S \to R)</M> is the subgroup of elements 
<M>s \in S</M> fixed under the action of <M>R</M>. 
<P/>
The <C>PreXModStabilizer</C> of <M>\mathcal{X}</M> is the subgroup of elements 
<M>r \in R</M> which act trivially on the whole of <M>S</M>. 
<P/>
The <C>DisplacementSubgroup</C> of <M>\mathcal{X}</M> is the subgroup <M>D_R(S)</M> 
of <M>S</M> generated by elements <M>(s^r)s^{-1}</M>. 
<P/>
The <C>DerivedSubXMod</C> of <M>\mathcal{X}</M> is the normal subcrossed module 
<M>[\mathcal{X},\mathcal{X}] = (\partial' : D_R(S) \to [R,R])</M> 
where <M>\partial'</M> is the restriction of <M>\partial</M>. 
<P/> 
These constructions are described on pages 19 and 66 of Norrie's thesis 
<Cite Key="N2" />. 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> D24 := DihedralGroup(24);
<pc group of size 24 with 4 generators>
gap> SetName( D24, "D24" );
gap> norm := NormalSubgroups( D24 );;
gap> List( norm, n->Size(n) );
[ 24, 12, 12, 12, 6, 4, 2, 3, 1 ]
gap> N5 := norm[5];;
gap> X5 := XModByNormalSubgroup( D24, N5 );
[Group( [ f3, f4 ] )->D24]
gap> Size( X5 );
[ 6, 24 ]
gap> fix := PreXModFixedPointSubgroup( X5 );
<pc group of size 2 with 1 generators>
gap> stab := PreXModStabilizer( X5 );
<pc group of size 12 with 1 generators>
gap> DisplacementSubgroup( X5 );
Group([ f4^2, f4 ])
gap> DX5 := DerivedSubXMod( X5 );  
[Group( [ f4^2, f4 ] )->Group( [ f3, f4 ] )]
]]>
</Example>

<ManSection>
   <Oper Name="IntersectionSubXMod"
         Arg="X1 X2" />
   <Oper Name="CommutatorSubXMod"
         Arg="X0 X1 X2" />
<Description>
When <C>X1,X2</C> are subcrossed modules of <C>X0</C>, and when 
<C>Y12 := IntersectionSubXMod(X1,X2)</C>, 
then the source and range of <C>Y12</C> are the intersections of 
the sources and ranges of <C>X1</C> and <C>X2</C>. 
<P/> 
The <C>CommutatorSubXMod</C> of <C>X1</C> and <C>X2</C> is <M>\ldots</M> 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> X24 := XModByAutomorphismGroup( D24 ); 
[D24->PAut(D24)]
gap> Size(X24);
[ 24, 48 ]
gap> N3 := norm[3];  N4 := norm[4];             
Group([ f1*f2*f3*f4^2, f3, f4 ])
Group([ f1, f3, f4 ])
gap> bdy := Boundary( X24 ); 
[ f1, f2, f3, f4 ] -> [ f1*f3, f2*f5, f2^2, f2 ]
gap> R3 := Image( bdy, N3 );  R4 := Image( bdy, N4 ); 
Group([ f1*f2^2*f3*f5, f2^2, f2 ])
Group([ f1*f3, f2^2, f2 ])
gap> X3 := SubXMod( X24, N3, R3 );
[Group( [ f1*f2*f3*f4^2, f3, f4 ] )->Group( [ f1*f2^2*f3*f5, f2^2, f2 ] )]
gap> X4 := SubXMod( X24, N4, R4 );
[Group( [ f1, f3, f4 ] )->Group( [ f1*f3, f2^2, f2 ] )]
gap> X6 := IntersectionSubXMod( X24, X3, X4 );
[Group( [ f3, f4, f3*f4, f4^2, f3*f4^2 ] )->Group( [ f2, f2^2 ] )]
gap> Size( X6 );
[ 6, 3 ]
gap> Y6 := CommutatorSubXMod( X24, X3, X4 );
[Group( [ f3, f4^2, f4, f3*f4^2 ] )->Group( [ f2 ] )]
gap> Size(Y6);
[ 6, 3 ]
gap> X6 = Y6;
false
]]>
</Example>

<ManSection>
   <Oper Name="FactorXMod"
         Arg="X1 X2" />
<Description>
When <M>\mathcal{X}_2 = (\partial_2 : S_2 \to R_2)</M> 
is a normal subcrossed module of 
<M>\mathcal{X}_1 = (\partial_1 : S_1 \to R_1)</M>, 
then the quotient crossed module is 
<M>(\partial : S_2/S_1 \to R_2/R_1)</M>
with the induced boundary and action maps. 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> nsx := NormalSubXMods( X24 );; 
gap> Length( nsx );  Size( nsx[30] );
40
[ 4, 8 ]
gap> Q := FactorXMod( X24, nsx[30] ); 
[Group( [ f1, f2, f2^2, f2 ] )->Group( 
[ f1, f2, <identity> of ..., <identity> of ..., <identity> of ... ] )]
gap> Size( Q );
[ 6, 6 ]
]]>
</Example>

<ManSection>
   <Prop Name="IsAbelian2dGroup"
         Arg="X0" />
   <Prop Name="IsAspherical2dGroup"
         Arg="X0" />
   <Prop Name="IsSimplyConnected2dGroup"
         Arg="X0" />
   <Prop Name="IsFaithful2dGroup"
         Arg="X0" />
<Description>
Need some description here.
</Description>
</ManSection>
<Example>
<![CDATA[
gap> [ IsAbelian2dGroup(X5), IsAbelian2dGroup(X24) ];
[ false, false ]
gap> [ IsAspherical2dGroup(X5), IsAspherical2dGroup(X24) ];
[ true, false ]
gap> [ IsSimplyConnected2dGroup(X5), IsSimplyConnected2dGroup(X24) ];
[ true, true ]
gap> [ IsFaithful2dGroup(X5), IsFaithful2dGroup(X24) ];              
[ false, true ]
]]>
</Example>

<ManSection>
   <Prop Name="IsNilpotent2dGroup"
         Arg="X0" />
   <Attr Name="NilpotencyClass2dGroup"
         Arg="X0" />
   <Attr Name="LowerCentralSeriesOfXMod"
         Arg="X0" />
<Description>
Need some description here. 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> LX1 := LowerCentralSeriesOfXMod( X1 );
[ [c5->PAut(c5)], [Group( [ (5,6,7,8,9) ] )->Group( () )] ]
gap> List( LX1, x -> Size(x) );            
[ [ 5, 4 ], [ 5, 1 ] ]
gap> IsNilpotent2dGroup( X1 );             
false
gap> NilpotencyClass2dGroup( X1 );         
0
]]>
</Example>




</Section>




<Section><Heading>Isoclinism of Groups</Heading>

<ManSection>
   <Attr Name="CentralQuotient"
         Arg="G" /> 
   <Attr Name="CentralQuotientHomomorphism"
         Arg="G" />
   <Oper Name="AreIsoclinicGroups"
         Arg="G H" />
<Description>
Let <M>G,H</M> be groups with central quotients 
<M>Q(G)=G/Z(G)</M> and <M>Q(H)=H/Z(H)</M> 
and derived subgroups <M>[G,G]</M> and <M>[H,H]</M> respectively. 
Let <M>c_G : Q(G) \times Q(G) \to [G,G]</M> 
and <M>c_H : Q(H) \times Q(H) \to [H,H]</M> be the two commutator maps.  
An <E>isoclinism</E> <M>G \sim H</M> is a pair of isomorphisms 
<M>(\eta,\xi)</M> where <M>\eta : Q(G) \to Q(H)</M> and 
<M>\xi : [G,G] \to [H,H]</M> such that
<M>c_G * \xi = (\eta \times \eta) * c_H</M>. 
Isoclinism is an equivalence relation, and all abelian groups are isoclinic 
to the trivial group.
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> G := SmallGroup( 64, 6 );
<pc group of size 64 with 6 generators>
gap> Q := CentralQuotient( G );
Group([ f1, f2, f3, <identity> of ..., <identity> of ..., <identity> of ... ])
gap> H := SmallGroup( 32, 41 );
<pc group of size 32 with 5 generators>
gap> iso := Isoclinism( G, H );
[ [ f1, f2, f3, <identity> of ..., <identity> of ..., <identity> of ... ] -> 
    [ f1, f2*f3, f3, <identity> of ..., <identity> of ..., <identity> of ... ]
    , [ f3, f5 ] -> [ f4*f5, f5 ] ]
gap> K := SmallGroup(32,43);
<pc group of size 32 with 5 generators>
gap> AreIsoclinicGroups(G,K);
false
]]>
</Example>

<ManSection>
   <Prop Name="IsStemGroup"
         Arg="G" />
   <Oper Name="AllStemGroupIds"
         Arg="n" />
   <Attr Name="IsoclinicStemGroups"
         Arg="G" />
<Description>
A group <M>G</M> is a <E>stem group</E> if <M>Z(G) \leq [G,G]</M>. 
Every group is isoclinic to a stem group, but distinct stem groups 
may be isoclinic. 
For example, groups <M>D_8, Q_8</M> are both stem groups but are isoclinic. 
<P/>
The function <C>IsoclinicStemGroups</C> returms the <C>IdGroup</C> list 
of the stem groups isoclinic to <M>G</M>. 
The function <C>AllStemGroupIds</C> returns the <C>IdGroup</C> list 
of the stem groups of a specified size. 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> CommutatorSubgroup( G, G );
Group([ f3, f5 ])
gap> IsStemGroup( G );
false
gap> IsoclinicStemGroups( G );
[ [ 16, 7 ], [ 16, 8 ], [ 16, 9 ] ]
gap> IsoclinicStemGroups( SmallGroup(32,6) );
[ [ 32, 6 ], [ 32, 7 ], [ 32, 8 ] ]
gap> AllStemGroupIds( 32 );
[ [ 32, 6 ], [ 32, 7 ], [ 32, 8 ], [ 32, 18 ], [ 32, 19 ], [ 32, 20 ], 
  [ 32, 27 ], [ 32, 28 ], [ 32, 29 ], [ 32, 30 ], [ 32, 31 ], [ 32, 32 ], 
  [ 32, 33 ], [ 32, 34 ], [ 32, 35 ], [ 32, 43 ], [ 32, 44 ], [ 32, 49 ], 
  [ 32, 50 ] ]
]]>
</Example>

<ManSection>
   <Attr Name="MiddleLength"
         Arg="G" />
<Description>
Let <M>G</M> be a finite group. Then <M>log_2 |[G,G] / (Z(G) \cap [G,G])|</M> is 
called the <E>middle length</E> of <M>G</M>. Also 
<M>log_2 |Z(G) \cap [G,G]| + log_2 |G/Z(G)|</M> is called <E>rank</E> of <M>G</M>. 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> MiddleLength(G);
1.
]]>
</Example>


</Section>


<Section><Heading>Isoclinism of Crossed Modules</Heading>

<ManSection>
   <Oper Name="AreIsoclinicXMods"
         Arg="X0 X1" />
<Description>
to follow
</Description>
</ManSection>
<Example>
<![CDATA[
gap> zz := 99;; 
]]>
</Example>
</Section>


</Chapter>
