<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  isclnc.xml            XMod documentation             Alper Odabas  -->
<!--                                                       & Enver Uslu  -->
<!--  version 2.43, 17/09/2015                                           --> 
<!--                                                                     --> 
<!--  Copyright (C) 2001-2015, Chris Wensley et al                       --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-isclnc">
<Heading>Isoclinism of Crossed Modules</Heading>

This chapter describes some functions written by Alper Odaba&#x15f; and  
Enver Uslu, and reported in <Cite Key="OUI1" />. 
They consist of some additional basic functions for crossed modules, 
and some functions dealing specifically with isoclinism. 


<Section><Heading>More operations for crossed modules</Heading>

<ManSection>
   <Attr Name="PreXModFixedPointSubgroup"
         Arg="X0" />
   <Attr Name="PreXModStabilizer"
         Arg="X0" />
   <Attr Name="DisplacementSubgroup"
         Arg="X0" />
   <Attr Name="DerivedSubXMod"
         Arg="X0" />
<Description>
The <C>PreXModFixedPointSubgroup(X)</C> for 
<M>\mathcal{X}=(\partial : S \to R)</M> is the subgroup of elements 
<M>s \in S</M> fixed under the action of <M>R</M>. 
<P/>
The <C>PreXModStabilizer</C> of <M>\mathcal{X}</M> is the subgroup of elements 
<M>r \in R</M> which act trivially on the whole of <M>S</M>. 
<P/>
The <C>DisplacementSubgroup</C> of <M>\mathcal{X}</M> is the subgroup <M>D_R(S)</M> 
of <M>S</M> generated by elements <M>(s^r)s^{-1}</M>. 
<P/>
The <C>DerivedSubXMod</C> of <M>\mathcal{X}</M> is the normal subcrossed module 
<M>[\mathcal{X},\mathcal{X}] = (\partial' : D_R(S) \to [R,R])</M> 
where <M>\partial'</M> is the restriction of <M>\partial</M>. 
<P/> 
These constructions are described on pages 19 and 66 of Norrie's thesis 
<Cite Key="N2" />. 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> D24 := DihedralGroup(24);
<pc group of size 24 with 4 generators>
gap> SetName( D24, "D24" );
gap> norm := NormalSubgroups( D24 );;
gap> List( norm, n->Size(n) );
[ 24, 12, 12, 12, 6, 4, 2, 3, 1 ]
gap> N5 := norm[5];;
gap> X5 := XModByNormalSubgroup( D24, N5 );
[Group( [ f3, f4 ] )->D24]
gap> Size( X5 );
[ 6, 24 ]
gap> fix := PreXModFixedPointSubgroup( X5 );
<pc group of size 2 with 1 generators>
gap> stab := PreXModStabilizer( X5 );
<pc group of size 12 with 1 generators>
gap> DisplacementSubgroup( X5 );
<pc group of size 3 with 1 generators>
gap> DX5 := DerivedSubXMod( X5 );  
[Group( [ f4 ] )->Group( <identity> of ... )]
]]>
</Example>

<ManSection>
   <Oper Name="IntersectionSubXMod"
         Arg="X1 X2" />
   <Oper Name="CommutatorSubXMod"
         Arg="X0 X1 X2" />
<Description>
When <C>X1,X2</C> are subcrossed modules of <C>X0</C>, and when 
<C>Y12 := IntersectionSubXMod(X1,X2)</C>, 
then the source and range of <C>Y12</C> are the intersections of 
the sources and ranges of <C>X1</C> and <C>X2</C>. 
<P/> 
The <C>CommutatorSubXMod</C> of <C>X1</C> and <C>X2</C> is <M>\ldots</M> 
</Description>
</ManSection>
<Example>
<![CDATA[
gap> X24 := XModByAutomorphismGroup( D24 ); 
[D24->PAut(D24)]
gap> Size(X24);
[ 24, 48 ]
gap> N3 := norm[3];  N4 := norm[4];             
Group([ f1*f2*f3*f4^2, f3, f4 ])
Group([ f1, f3, f4 ])
gap> bdy := Boundary( X24 ); 
[ f1, f2, f3, f4 ] -> [ f1*f3, f2*f5, f2^2, f2 ]
gap> R3 := Image( bdy, N3 );  R4 := Image( bdy, N4 ); 
Group([ f1*f2^2*f3*f5, f2^2, f2 ])
Group([ f1*f3, f2^2, f2 ])
gap> X3 := SubXMod( X24, N3, R3 );
[Group( [ f1*f2*f3*f4^2, f3, f4 ] )->Group( [ f1*f2^2*f3*f5, f2^2, f2 ] )]
gap> X4 := SubXMod( X24, N4, R4 );
[Group( [ f1, f3, f4 ] )->Group( [ f1*f3, f2^2, f2 ] )]
gap> X6 := IntersectionSubXMod( X24, X3, X4 );
[Group( [ f3, f4, f3*f4, f4^2, f3*f4^2 ] )->Group( [ f2, f2^2 ] )]
gap> Size( X6 );
[ 6, 3 ]
gap> Y6 := CommutatorSubXMod( X24, X3, X4 );
[Group( [ f3 ] )->Group( [ f2 ] )]
gap> X6 = Y6;
true
]]>
</Example>


</Section>




<Section><Heading>Isoclinism</Heading>

<ManSection>
   <Oper Name="AreIsoclinicXMods"
         Arg="X0 X1" />
<Description>
to follow
</Description>
</ManSection>
<Example>
<![CDATA[
gap> zz := 99;; 
]]>
</Example>
</Section>


</Chapter>
